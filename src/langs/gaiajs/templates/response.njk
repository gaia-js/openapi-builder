/**
 * generated by template generator. don't modify it.
 *
 */

import GaiaResponse from '17zy_egg-gaiajs/app/lib/response';
{% for refType in utils.refTypesForSchemaObject(schema) %}
import {{refType}} from '../types/{{refType}}';
{%- endfor %}
/**
 *{% if response.description %} {{response.description}}{% endif %}
 */
export default class {{name}}Response extends GaiaResponse {
{% for name, field in schema.properties -%}
{% if field.description %}  // {{field.description}}{% endif %}
  {{name}}: {{utils.typeFor(field)}};
{% endfor %}

  constructor(data: any) {
    super(data);

  }

  async dump(): Promise<any> {
    const result: any = {};

    {%- for name, field in schema.properties %}
    {% if field.type === 'array' and field.items.$ref -%}
    result.{{name}} = [];
    for (const item of (await this.getField('{{name}}'))) {
        result.{{name}}.push(await (new {{utils.typeFor(field.items)}}(item).dump()));
    }
    {%- elif field.$ref -%}
    result.{{name}} = await (new {{utils.typeFor(field)}}(await this.getField('{{name}}')).dump());
    {%- else -%}
    result.{{name}} = await this.getField('{{name}}');
    {%- endif %}
    {%- endfor %}

    return result;
  }
}
