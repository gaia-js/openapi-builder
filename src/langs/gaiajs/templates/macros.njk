{% macro prepareSimpleValue(valueName, field, root, propertyName) -%}
{%- endmacro %}

{% macro simpleValue(valueName, field, root, propertyName) -%}
{{valueName}}
{%- endmacro %}

{% macro prepareRefObjectValue(valueName, field, root, propertyName) -%}
const {{valueName}} = await (new {{utils.typeFor(field)}}(await {{valueName}}, this.ctx)).dump();
{%- endmacro %}

{%- macro refObjectValue(valueName, field, root, propertyName) -%}
(({{ valueName }}) && (await (new {{utils.typeFor(field)}}(await {{ valueName }}, this.ctx)).dump()))
{%- endmacro -%}

{%- macro prepareObjectValue(valueName, field, root) -%}
{%- if root -%}
const [
{%- for propertyName, propertySchema in field.properties -%}
{{ propertyName }},
{%- endfor -%}
] = await Promise.all([
{%- for propertyName, propertySchema in field.properties -%}
{{ value(valueName+'.'+propertyName, propertySchema, false, propertyName) }},
{%- endfor -%}
]) as [
  {%- for propertyName, propertySchema in field.properties -%}
  {{utils.typeFor(propertySchema)}},
  {%- endfor -%}
];
{%- else -%}
{%- endif -%}
{% endmacro -%}

{%- macro prepareMapValue(valueName, field, root, schema, ignoreProperties) %}
{% endmacro -%}

{% macro objectValue(valueName, field, root, propertyName) -%}
{% if root -%}
  {%- if not field.properties and not field.additionalProperties -%}
    {{simpleValue(valueName, field, root, schema)}}
  {%- else -%}
    { {% if field.properties -%}
        {% for propertyName, propertySchema in field.properties -%}
      {{ propertyName }}, {% endfor %}
      {%- endif -%}
      {%- if field.additionalProperties -%}
        ...(await (async() => {
          const result = {};
          for (const [key,value] of ({{valueName}} instanceof Map ? {{valueName}}.entries() : Object.entries({{valueName}}))) {
            {% if field.properties -%} if (!{{Object.keys(field.properties)}}.includes(key)) { {%- endif -%}
            result[key] = {{ value('value', field.additionalProperties, false) }};
            {%- if field.properties %}} {%- endif %}
          };
          return result;
        })()),
      {%- endif -%}
    }
  {%- endif -%}
{%- else -%}
  ({{ valueName }} && (await (async {{ propertyName }} => {
    {{- prepareValue(propertyName, field, true) -}}
    return {{ value(propertyName, field, true) -}};})({{ valueName }})))
{%- endif -%}
{%- endmacro %}

{% macro prepareArrayValue(valueName, field, root, propertyName) -%}
{%- endmacro %}

{% macro arrayValue(valueName, field, root, propertyName) -%}
(await Promise.all((await {{valueName}} || []).map(async item => ({{ value('item', field.items, false, propertyName) }}))))
{%- endmacro %}

{%- macro value(valueName, field, root, propertyName) -%}

{%- if field.type === 'array' -%}
{{ arrayValue(valueName, field, root, propertyName) }}
{%- elif field.$ref -%}
{{ refObjectValue(valueName, field, root, propertyName) }}
{%- elif field.type === 'object' -%}
{{ objectValue(valueName, field, root, propertyName) }}
{%- else -%}
{{ simpleValue(valueName, field, root, propertyName) }}
{%- endif -%}

{%- endmacro -%}

{% macro assignValue(resultName, valueName, field) %}
{{resultName}} = {{ value(valueName, field) }};
{% endmacro %}

{% macro prepareValue(valueName, field, root) -%}
{%- if field.type === 'array' -%}
{{ prepareArrayValue(valueName, field, root) }}
{%- elif field.$ref -%}
{{ prepareRefObjectValue(valueName, field, root) }}
{%- elif field.type === 'object' -%}
  {%- if field.properties -%}
  {{ prepareObjectValue(valueName, field, root) }}
  {%- endif -%}
  {%- if field.additionalProperties -%}
  {{ prepareMapValue(valueName, field, root, field.additionalProperties, field.properties) }}
  {%- endif -%}
{%- else -%}
{{ prepareSimpleValue(valueName, field, root) }}
{%- endif -%}

{% endmacro %}
