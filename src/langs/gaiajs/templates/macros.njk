{% macro prepareSimpleValue(valueName, field, root, propertyName) -%}
{%- endmacro %}

{% macro simpleValue(valueName, field, root, propertyName) -%}
{{valueName}}
{%- endmacro %}

{% macro prepareRefObjectValue(valueName, field, root, propertyName) -%}
const {{valueName}} = await (new {{utils.typeFor(field)}}(await {{valueName}}, this.ctx)).dump();
{%- endmacro %}

{%- macro refObjectValue(valueName, field, root, propertyName) -%}
(({{ valueName }}) && (await (new {{utils.typeFor(field)}}(await {{ valueName }}, this.ctx)).dump()))
{%- endmacro -%}

{%- macro prepareObjectValue(valueName, field, root) -%}
{%- if root -%}
const [
{%- for propertyName, propertySchema in field.properties -%}
{{ propertyName }},
{%- endfor -%}
] = await Promise.all([
{%- for propertyName, propertySchema in field.properties -%}
{{ value(valueName+'.'+propertyName, propertySchema, false, propertyName) }},
{%- endfor -%}
]) as [
  {%- for propertyName, propertySchema in field.properties -%}
  {{utils.typeFor(propertySchema)}},
  {%- endfor -%}
];
{%- else -%}
{%- endif -%}
{% endmacro -%}

{%- macro prepareMapValue(valueName, field, root, schema, ignoreProperties) %}
{% endmacro -%}

{% macro objectValue(valueName, field, root, propertyName) -%}
{% if root -%}
  {%- if not field.properties and not field.additionalProperties -%}
    {{simpleValue(valueName, field, root, schema)}}
  {%- else -%}
    { {% if field.properties -%}
        {% for propertyName, propertySchema in field.properties -%}
      {{ propertyName }}, {% endfor %}
      {%- endif -%}
      {%- if field.additionalProperties -%}
        ...(await (async() => {
          const result = {};
          for (const [key,value] of ({{valueName}} instanceof Map ? {{valueName}}.entries() : Object.entries({{valueName}}))) {
            {% if field.properties -%} if (!{{Object.keys(field.properties)}}.includes(key)) { {%- endif -%}
            result[key] = {{ value('value', field.additionalProperties, false) }};
            {%- if field.properties %}} {%- endif %}
          };
          return result;
        })()),
      {%- endif -%}
    }
  {%- endif -%}
{%- else -%}
  ({{ valueName }} && (await (async {{ propertyName }} => {
    {{- prepareValue(propertyName, field, true) -}}
    return {{ value(propertyName, field, true) -}};})({{ valueName }})))
{%- endif -%}
{%- endmacro %}

{% macro prepareArrayValue(valueName, field, root, propertyName) -%}
{%- endmacro %}

{% macro arrayValue(valueName, field, root, propertyName) -%}
(await Promise.all((await {{valueName}} || []).map(async item => ({{ value('item', field.items, false, propertyName) }}))))
{%- endmacro %}

{%- macro value(valueName, field, root, propertyName) -%}

{%- if field.type === 'array' -%}
{{ arrayValue(valueName, field, root, propertyName) }}
{%- elif field.$ref -%}
{{ refObjectValue(valueName, field, root, propertyName) }}
{%- elif field.type === 'object' -%}
{{ objectValue(valueName, field, root, propertyName) }}
{%- else -%}
{{ simpleValue(valueName, field, root, propertyName) }}
{%- endif -%}

{%- endmacro -%}

{% macro assignValue(resultName, valueName, field) %}
{{resultName}} = {{ value(valueName, field) }};
{% endmacro %}

{% macro prepareValue(valueName, field, root) -%}
{%- if field.type === 'array' -%}
{{ prepareArrayValue(valueName, field, root) }}
{%- elif field.$ref -%}
{{ prepareRefObjectValue(valueName, field, root) }}
{%- elif field.type === 'object' -%}
  {%- if field.properties -%}
  {{ prepareObjectValue(valueName, field, root) }}
  {%- endif -%}
  {%- if field.additionalProperties -%}
  {{ prepareMapValue(valueName, field, root, field.additionalProperties, field.properties) }}
  {%- endif -%}
{%- else -%}
{{ prepareSimpleValue(valueName, field, root) }}
{%- endif -%}

{% endmacro %}

{% macro buildRule(parameters) %}
{%- for field in parameters %}
      {{field.name}}: {% call buildFieldRule(field.schema) %}{% endcall %}{% endfor %}
{% endmacro %}

{%- macro buildFieldRule(schema) %}{
        type: '{{utils.primitiveType(schema)}}', required: {%- if schema.required %} {{schema.required}}{% else %} false{% endif %},
 {%- if schema.convertType !== undefined %} convertType: '{{schema.convertType}}',{%- endif %}
 {%- if schema.default !== undefined %} default: '{{schema.default}}',{%- endif %}
 {%- if schema.widelyUndefined !== undefined %} widelyUndefined: {{schema.widelyUndefined}},{% endif %}
 {%- if utils.primitiveType(schema) in ['number', 'string', 'array', 'password'] and schema.max !== undefined  %} max: {{schema.max}},{% endif %}
 {%- if utils.primitiveType(schema) in ['number', 'string', 'array', 'password'] and schema.min !== undefined  %} min: {{schema.min}},{% endif %}
 {%- if utils.primitiveType(schema) === 'string' %} {%- if schema.allowEmpty !== undefined %} allowEmpty: {{schema.allowEmpty}},{% endif %}
 {%- if schema.regExp !== undefined %} format: {{schema.regExp}},{% endif %}
 {%- if schema.trim !== undefined %} trim: {{schema.trim}},{% endif %}{%- endif %}
 {%- if utils.primitiveType(schema) === 'password' %} {%- if schema.compare !== undefined %} compare: '{{schema.compare}}',{%- endif %}{%- endif %}
 {%- if utils.primitiveType(schema) === 'enum' and schema.values.length > 0 %} values: [{% for v in schema.values %}'{{v}}', {% endfor %}],{%- endif %}
 {%- if utils.primitiveType(schema) === 'object' and schema.properties -%} rule: { {%- call buildProperties(schema.properties) %}{%- endcall -%} }, {%- endif -%}
 {%- if utils.primitiveType(schema) === 'array' and schema.items !== undefined %} {%- call buildItems(schema.items) %}{%- endcall %}{%- endif %} },
{%- endmacro %}

{%- macro buildProperties(properties) %} {%- for name, schema in properties -%}{{name}}: {%- call buildFieldRule(schema) -%}{%- endcall -%}{%- endfor -%}{%- endmacro -%}

{%- macro buildItems(items) %} itemType: '{{ items.type }}',{%- if utils.primitiveType(items) === 'array' %} rule: {%- call buildFieldRule(items) %}{%- endcall %}{%- elif utils.primitiveType(items) === 'object' %} rule: { {%- call buildProperties(items.properties) %}{%- endcall %} }{% else %}rule: {%- call buildFieldRule(items) %}{%- endcall %}{%- endif %}{%- endmacro %}

{% macro buildFormat(parameters) %}
  {% for field in parameters %}
    {% call buildCommonFormat('data', field.name, field.schema) %}{% endcall %}
  {% endfor %}
{% endmacro %}

{% macro buildCommonFormat(parentName, currentName, schema) %}
  if ({{parentName}}.hasOwnProperty('{{ currentName }}')) {
    {% set name = parentName + '.' + currentName %}
    {% if utils.primitiveType(schema) in ['date', 'datetime', 'dateTime'] %}
      {{ name }} = new Date({{ name }});
    {% elif utils.primitiveType(schema) === 'object'  %}
      {%- call buildObjectFormat(parentName, currentName, schema.properties) %}{% endcall %}
    {% elif utils.primitiveType(schema) === 'array' and schema.items  %}
      {% set j = "_"+name | replace("[", "_") | replace("]", "_") | replace(".", "_") %}
      for (let {{j}} = 0; {{j}} < {{name}}.length; {{j}}++) {
        {%- call buildArrayFormat(name, '[' + j + ']', schema.items, 0) %} {% endcall %}
      }
    {% endif %}
  }
{% endmacro %}

{% macro buildObjectFormat(parentName, currentName, properties) %}
  if ({{parentName}}.hasOwnProperty('{{currentName}}')) {
    {% for name, schema in properties %}
      {% if schema.type === 'object' and schema.properties %}
        {% call buildObjectFormat(parentName + '.' + currentName, name, schema.properties) %}{% endcall %}
      {% elif schema.type === 'array' and schema.items %}
        {% call buildArrayFormat(parentName + '.' + currentName, name, schema.items) %}{% endcall %}
      {% elif schema.type in ['date', 'datetime', 'dateTime'] %}
        {{ parentName + '.' + currentName + '.' + name }} = new Date({{ parentName + '.' + currentName + '.' + name }});
      {% endif %}
    {% endfor %}
  }
{% endmacro %}

{% macro buildArrayFormat(parentName, currentName, schema, isCheckProperty = 1) %}
  {% if isCheckProperty === 1 %} if ({{ parentName }}.hasOwnProperty('{{ currentName }}')) { {% endif %}
    {% if isCheckProperty === 1 %} {% set name = parentName + '.' + currentName %} {% else %} {% set name = parentName + currentName %} {% endif %}
    {% set j = "_" + name | replace("[", "_") | replace("]", "_") | replace(".", "_") %}
      {% if utils.primitiveType(schema) in ['date', 'datetime', 'dateTime'] %}
        {{name}} = new Date({{name}});
      {% elif utils.primitiveType(schema) === 'array' %}
        for (let {{j}} = 0; {{j}} < {{name}}.length; {{j}}++) {
          {%- call buildArrayFormat(name, '[' + j + ']', schema.items, 0) %}{%- endcall %}
        }
      {% endif %}
  {% if isCheckProperty !== 0 %} } {% endif %}
{% endmacro %}