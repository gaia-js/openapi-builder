/**
 * generated by template generator. don't modify it.
 *
 */

import { Context } from 'egg';
import GaiaRequest from '17zy_egg-gaiajs/app/lib/request';
{% for type in utils.allTypes(request) -%}
{% endfor %}{% for refType in utils.refTypes(request) -%}
import {{refType}} from '../types/{{refType}}';
{% endfor %}

/**
 * path: {{url}}
 *{%- if request.summary %} {{request.summary}}{% endif %}
 *{%- if request.description %} {{request.description}}{% endif %}
 */
export default class {{request.name}}Request extends GaiaRequest {
  static accessorName = '{{request.name}}';
  static path = '{{request.path}}';
  static method = '{{request.method | upper}}';

  {% for field in request.parameters -%}
  /**
{% if field.description %}   * {{field.description}}
{% endif %}   *
   * @type {{utils.typeFor(field.schema)}}
   * @memberof {{request.name}}
   */
  {{field.name}}{%- if field.schema.required !== true -%}?{%- endif %}:
    {%- if field.schema.format === 'enum' %} {% for v in field.schema.enum %}'{{ v }}'{% if loop.index !== loop.length %} | {%endif%}{% endfor %}
    {%- else %} {{utils.typeFor(field.schema)}}{%- endif %};

  {% endfor -%}

  // tslint:disable-next-line: max-func-body-length
  constructor(params: any, ctx: Context) {
    super(params, ctx);

    {%- if request.parameters and request.parameters.length > 0 %}
    const data: {
      [K: string]: any;
    } = {};

    {% for field in request.parameters %}
    if ({% if field.in === 'query' %}ctx.query{% elif field.in === 'body' %}ctx.request.body{% elif field.in === 'path' %}ctx.params{% else %}params{% endif %}.hasOwnProperty('{{field.name}}')) {
      data.{{field.name}} = {% if field.in === 'query' %}ctx.query{% elif field.in === 'body' %}ctx.request.body{% elif field.in === 'path' %}ctx.params{% else %}params{% endif %}.{{field.name}};
    }
    {% endfor %}

    const rules = {
        {%- from "./macros.njk" import buildRule with context %}{{ buildRule(request.parameters) }}
    };

    try {
      ctx.validate(rules, data);
    } catch (err) {
      ctx.service.error.throwRequestValidateError(err);
    }

    Object.defineProperties(this, {
      {%- for field in request.parameters %}
      {{ field.name }}: { value: data.{{field.name}} },
      {%- endfor %}
    });

    Object.defineProperty(this, 'toJSON', {
      value: () => {
        return data;
      },
    });
    {%- endif %}
  }
}
